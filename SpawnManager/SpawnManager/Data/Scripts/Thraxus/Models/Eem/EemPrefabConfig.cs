using System;
using SpawnManager.SpawnManager;

namespace SpawnManager.Models
{
    public static class EemPrefabConfig
    {
        private static bool _ranOnce;
        private static void RunOnce()
        {
            if (_ranOnce) return;
            _ranOnce = true;
            try
            {
                CustomPrefabConfiguration testPrefab = new CustomPrefabConfiguration("IMDC_Cerberus_Destroyer_Mk.3", "IMDC Cerberus Destroyer Mk.3", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 9000, playerPriority: 1, factionTag: "IMDC", ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("IMDC_Defense_Platform_NPC", "IMDC Defense Platform", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "IMDC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("IMDC_Vulture_Fighter_Bomber", "IMDC Vulture Fighter Bomber", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "IMDC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Pilgrims_Curiosity", "The Pilgrims Curiosity", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Commercial_Salvager_Cirva", "Commercial Salvager", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("G08TX-043A_Arclight", "G08TX-043A Arclight", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 6000, playerPriority: 1, factionTag: "UCMF", ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Mining_Station_Cirva", "Mining Station Cirva", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Neutral_Solar_Power_Plant_S", "Small Solar Recharge Station", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Object_Defense_Platform_Echo", "Object Defense Platform Echo", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Refinery_Station_Barite", "Refinery Station Barite", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Refinery_Station_Barite", "RSB Mini infantry Bot", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Refinery_Station_Barite", "Panzerklein Exosuit", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Refueling_Station_XL_Beta", "Refueling Station XL Beta", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Salvaging_Outpost", "Salvaging Outpost", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Artifact_Research_Station", "Respawn Jetpack", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Artifact_Research_Station", "EEM Desktop PC", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Artifact_Research_Station", "TARS Mini infantry Bot", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Artifact_Research_Station", "TARS Courier Drone", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Artifact_Research_Station", "EEM Strider Mech", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Viper_Headhunter", "Viper Headhunter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 100, seekDistance: 9000, playerPriority: 1, ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Carcharodon_Destroyer", "Amphion Carcharodon Destroyer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 90, seekDistance: 9000, playerPriority: 1, factionTag: "AMPH", delayedAi: true, activationDistance: 1000);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Diatom_Waystation", "Amphion Diatom Waystation", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Hippocampus_Transport", "Amphion Hippocampus Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 250, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Hydrozoa_Waystation", "Hydrozoa Waystation", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Polyp_Small_Outpost", "Amphion Polyp Small Outpost", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Reef_Barrier_Station", "Amphion Reef Barrier Station", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Reef_Barrier_Station", "EEM Mini infantry Bot AMPH", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Rotifer_Waystation", "Amphion Rotifer Waystation", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Seadevil_Minelayer", "Amphion Seadevil Minelayer", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 350, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Sunfish_Fast_Attack_Craft", "Sunfish Fast Attack Craft", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Amphion_Thresher_Interceptor", "Amphion Thresher Interceptor", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "AMPH");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Cottonmouth_Pirate", "Cottonmouth", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 60, seekDistance: 14000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Cursor_Fighter_Pirate", "Cursor Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 30, seekDistance: 11000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Firefly_Drone_Pirate", "Firefly Drone Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 0, seekDistance: 7000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Phorusrhacos_Pirate", "Phorusrhacos Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 100, seekDistance: 1200, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Piranha_Atmo_Fighter", "Piranha Atmo Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("R-1B_Hover_Bike_Pirate", "R-1B Hover Bike Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Robber_Fly_LPR-I_Pirate", "Robber Fly LPR-I Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 0, seekDistance: 9000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Scouting_Pod_Atmo", "Scouting Pod", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Shockwave_Heavy_Fighter_Pirate", "Shockwave Heavy Fighter Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 30, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("EEM_Beacon_TradeRoute_Waypoint", "Trade Route Waypoint", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("EEM_Beacon_TradeRouteStart", "Trade Route Beacon", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("EEM_Navigational_Beacon", "Navigational Beacon", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("ADST_Anitollia", "ADST Anitollia", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Adventures_Spirit", "Adventure's Spirit", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 400, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("ATLANT_High_Security_Transport", "ATLANT High Security Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 300, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Atlas_Heavy_Freighter", "Atlas Heavy Freighter", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("B-25_Fringe_Raider_Salvage_Team", "B-25 Fringe Raider", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 30, seekDistance: 3000, playerPriority: 1, factionTag: "CIVL", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Bee_Survivalist", "Bee Survivalist", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Bellerophon", "Bellerophon", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Blitz_Freighter", "Blitz Freighter", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 900, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("BSS_Colibri", "BSS Colibri", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Cardinals_Escort", "Cardinal's Escort", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 4000, playerPriority: 1, factionTag: "CIVL", delayedAi: true, activationDistance: 1100);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Commercial_Salvager_NPC", "Commercial Salvager Goldiva", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 650, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Condor_Exploration_Ship", "Condor Exploration Ship", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Crossbow_Military_Transport", "Crossbow Military Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 900, fleeSpeedCap: 350, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Delta_V", "Delta V", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 400, fleeSpeedCap: 3000, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Drake_Hauler", "Drake Hauler", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Eisvogel", "Eisvogel", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("GH-0(ST)_Stellar_Transport", "GH-0(ST) Stellar Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Grasshopper", "Grasshopper", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Hornet_Mini", "Hornet Mini", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 550, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Hornet_Shuttle", "Hornet Shuttle", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 500, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Hornet_Warrior", "Hornet Warrior", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 70, seekDistance: 5000, playerPriority: 1, factionTag: "CIVL", delayedAi: true, activationDistance: 600);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Hornet_XL", "Hornet XL", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Ibis_NPC", "Ibis", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 600, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Intrepidus_Angelus", "Intrepidus Angelus", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("ISS_Fornax", "ISS Fornax", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 300, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Jumper", "Jumper", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("L.R.M.H_Phoenix_Dawn", "L.R.M.H Phoenix Dawn", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 300, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Little_Bird_Courier", "Little Bird Courier", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 650);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("OACV_Cicada", "OACV Cicada", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Passenger_Shuttle_Borealis_D2", "Passenger Shuttle Borealis D2", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PI-NI", "PI-NI", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Private_Shuttle", "Private Shuttle", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("R-71_Buzzard", "R-71 Buzzard", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Sahara_Small_Cargo_Ship", "Sahara Small Cargo Ship", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Salyut_Freighter", "Salyut Freighter", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Small_Freighter_Husky_L", "Small Freighter Husky L", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 700, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Small_Freighter_Husky_M", "Small Freighter Husky M", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 300, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Small_Freighter_Husky_S", "Small Freighter Husky S", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Small_Freighter_Husky_XL", "Small Freighter Husky XL", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 200, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Smugglers_Legacy", "Smugglers Legacy", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 600, fleeSpeedCap: 295);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Space_Bus", "Space Bus", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Space_Ray", "Space Ray", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 450, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("SP-LEV348", "SP-LEV348", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 400, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("SP-MEV133", "SP-MEV133", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 380, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("SP-MEV487", "SP-MEV487", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 350, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Tempest_Exploration_Ship", "Tempest Exploration Ship", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 420, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("The_Salvador", "The Salvador", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Thugboat_Survivalist", "Thugboat Survivalist", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 520, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Tug_Targ", "Tug Targ", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Tugboat_Salvage_Team", "Tugboat Salvage Team", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 300, fleeSpeedCap: 500, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Unknown_Ship_Courier", "Unknown Ship", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 750, factionTag: "SPRT");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("V-2_Gunboat_Salvage_Team", "V-2 Gunboat Salvage Team", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1, factionTag: "CIVL", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Vandraren", "Vandraren", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 300, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Wayfarer", "Wayfarer", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Wedge_Civilian_Transport", "Wedge Civilian Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 600, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Cicada_Experemental_Debris", "Cicada Debris", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Fighter_Remains_1", "Ship Debris Alpha", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Fighter_Remains_2", "Ship Debris Beta", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Fighter_Remains_3", "Ship Debris Delta", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("High-Tech_Factory_Infected_self-destruct", "Hi-Tech Factory", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "CIVL");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Wreckage_2", "Darneus", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_521_Trade_Center_Destroyed", "XMC 521 Trade Center_Destroyed", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Barracuda_Bomber", "HS Barracuda Bomber", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Cargo_Drone", "Hyperion Systems Cargo Drone", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 500, fleeSpeedCap: 350);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Dragonfly_Fighter", "HS Dragonfly Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Locust_Bomber", "HS Locust Bomber", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Revenant", "HS Revenant", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Viper_Destroyer", "HS Viper Destroyer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 12000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Wasp_Interceptor", "HS Wasp Interceptor", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 12000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("HS_Wasp_Interceptor_Mk.II", "HS Wasp Interceptor Mk.II", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 12000, playerPriority: 1, factionTag: "HS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("IMDC_Atlas_Frigate", "IMDC Atlas Frigate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 1200, playerPriority: 1, factionTag: "IMDC", delayedAi: true, activationDistance: 1000);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("IMDC_Condor_Dropship", "IMDC Condor Dropship", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 6000, playerPriority: 1, factionTag: "IMDC", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("IMDC_Hornet_Fighter", "IMDC Hornet Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "IMDC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("IMDC_Kestrel", "IMDC Kestrel", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "IMDC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_IMDC_1781_Service_Platform", "IMDC 1781 Service Platform", type: CustomPrefabConfiguration.PrefabType.Station);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Einartoft_Industrial_Station", "KUS Einartoft-Class Industrial Station", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Einartoft_Industrial_Station", "Small Grid 4357", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Einartoft_Industrial_Station", "Miner Drone Mk.II", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Einartoft_Industrial_Station", "Repair Drone Mk.III", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Einartoft_Industrial_Station", "Courier Drone", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Spartos_Heavy_Bomber", "KUS Spartos Heavy Bomber", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Spartos_Light_Bomber_Escort", "KUS Spartos Light Bomber_Escort", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1, factionTag: "KUSS", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Spartos_Light_Bomber_Security", "KUS Spartos Light Bomber Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 6000, playerPriority: 1, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Tranquility_Industrial_Ship", "KUS Tranquility Industrial Ship", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 800, fleeSpeedCap: 250, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("KUS_Waystation", "KUS Waystation", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "KUSS");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MAH_Broadsword_Escort", "MAH Broadsword Escort", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 5000, playerPriority: 1, factionTag: "MA-I", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MAH_Broadsword_Security", "MAH Broadsword Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MAH_Excalibur_Security", "MAH Excalibur Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MAH_Magellan_Large_Transport", "MAH Magellan Large Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 250, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MAH_Omega_A_Security", "MAH Omega A Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 12000, playerPriority: 1, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MAH_SF-3C_Wyvern", "MAH SF-3C Wyvern", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_MAH_Barial_Medium_Transport", "MAH Barial Medium Transport", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 350, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_MAH_T-16_Albatross_NPC", "MAH T-16 Albatross", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 550, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_Mahriane_34_Trading_Outpost", "Mahriane 34 Trading Outpost", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_Mahriane_56_Trading_Outpost", "Mahriane 56 Trading Outpost", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_Mahriane_8724_Service_Platform", "Mahriane 8724 Service Platform", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_MAH-T14_Pigeon_Merc_NPC", "MAH-T14 Pigeon Merc", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 700, fleeSpeedCap: 600);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_MAH-T14_Pigeon_Privateer_NPC", "MAH-T14 Pigeon Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1, factionTag: "UCMF", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_MAH-T14b_Pigeon_Mahriane_NPC", "MAH-T14b Pigeon", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 500, fleeSpeedCap: 600, factionTag: "MA-I");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Armadillo", "MGE Armadillo Recon", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 6000, playerPriority: 1, factionTag: "MMEC", ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Cobra_Fighter", "MGE Cobra Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "MMEC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Firehawk", "MGE Firehawk", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 100, seekDistance: 12000, playerPriority: 1, factionTag: "MMEC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Harpy", "MGE Harpy", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "MMEC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Haunter", "MGE Haunter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "MMEC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_NUK-F_Hornet", "MGE NUK-F Hornet", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "MMEC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Plight_Of_Pegasus", "MGE Plight Of Pegasus", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 6000, playerPriority: 1, factionTag: "MMEC", ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("MGE_Plight_Of_Pegasus", "MGE Blight Of Pegasus", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 3000, playerPriority: 1, factionTag: "MMEC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AS-9M_Moondust_Military", "AS-9M Moondust", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 70, seekDistance: 12000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Asp_Privateer", "Asp Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Aurora_Military", "Aurora", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 12000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Centaur_Military", "Centaur Gunship", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Cicada_Experemental_Military", "Cicada Experemental", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 70, seekDistance: 12000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Donau_Torpedo_Corvette_Military", "EEM Donau_Torpedo_Corvette", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LongRange, callHelpProbability: 0, seekDistance: 12000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Eagle_Privateer", "Eagle Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 80, seekDistance: 5000, playerPriority: 1, factionTag: "UCMF", delayedAi: true, activationDistance: 800);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("F-47_Flicker_Military", "F-47 Flicker Military", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Hearts_Military", "Hearts Military", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 70, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Lachesis_Heavy_Cruiser", "Lachesis Heavy Cruiser", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 70, seekDistance: 12000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("LRHF-2_Andrealphus_Military", "LRHF-2 Andrealphus", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Midnight_Gunship_Military", "Midnight Gunship", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 70, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Military_Dagger", "Military Dagger", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 70, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Military_Kodiak_Destroyer", "Military Kodiak Destroyer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 80, seekDistance: 12000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Paladin_Strike_Fighter_Privateer", "Paladin Strike Fighter Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 80, seekDistance: 4000, playerPriority: 1, factionTag: "UCMF", delayedAi: true, activationDistance: 800);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Pelican_LGS_Privateer", "Pelican LGS Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 80, seekDistance: 4000, playerPriority: 1, factionTag: "UCMF", delayedAi: true, activationDistance: 800);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Rescue_2_Refit_Military_Drone", "Rescue 2 Refit Military Drone", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Sable_Privateer", "Sable Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("SFB-1_Privateer", "SFB-1 Privateer", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 80, seekDistance: 4000, playerPriority: 1, factionTag: "UCMF", delayedAi: true, activationDistance: 800);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Shanxi_Torpedo_Cruiser_Military", "Shanxi Torpedo Cruiser", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LongRange, callHelpProbability: 70, seekDistance: 15000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Space_Bike_ADC-300S_Privateer", "Space Bike ADC-300S Privateer", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: false, fleeTriggerDistance: 600, fleeSpeedCap: 900, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("SuperWolf_Military", "SuperWolf Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Wolf_VIII_Military", "Wolf VIII Military", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 70, seekDistance: 10000, playerPriority: 1, factionTag: "UCMF");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XF-9_Viper_Military", "XF-9 Viper Recon", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 100, seekDistance: 3000, playerPriority: 1, factionTag: "UCMF", ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Guard_Advanced_Pirate", "Advanced Guard Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 70, seekDistance: 6000, playerPriority: 1, ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Guard_Advanced_Pirate_Ready", "Advanced Guard Pirate Mk.2", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 5000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Old_Drone", "Old Drone", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1, ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Old_Drone_Mk.II", "Old Drone Mk.II", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 5000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Old_Drone_Ready", "Old Drone Mk.2", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Panzerklein_Mech", "EEM AI Panzerklein Mech Drone Mk.II", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3500, playerPriority: 1, ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("ArrowHead_Pirate", "ArrowHead", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 60, seekDistance: 5000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("B-30_Privateer_Pirate", "B-30 Privateer Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("B8_Barracuda_Pirate", "B8 Barracuda Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 70, seekDistance: 8000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("B8_Barracuda_Pirate", "B8 Barracuda Pirate Mk.2", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 100, seekDistance: 8000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Barb_Mk.2", "Barb Mk.2", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Crow_Fighter_Pirate", "Crow Fighter", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Cyanide_Pirate", "Cyanide", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("FE-201_Enforcer_Pirate", "FE-201 Enforcer Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 70, seekDistance: 4000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Grinder_Drone_Pirate", "Grinder Drone Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Grinder, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1, ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Grinder_Drone_Pirate_Ready", "Grinder Drone Pirate Mk.2", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Grinder, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Incisor_mk.3", "Incisor mk.3", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpOnDamage: false, seekDistance: 6000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Kite_EW_Pirate", "Kite EW Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 11000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Mosquito_Pirate", "Mosquito Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 6000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Panzerklein_Piloted_Pirate", "EEM Panzerklein_Piloted_Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Pelican_LGS_Pirate", "Pelican LGS Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 1000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Pirate_Gunship", "Pirate Gunship", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Raptor_Drone_Pirate", "Raptor Drone Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 6000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Razor_Pirate", "Razor Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Grinder, callHelpProbability: 50, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Redcore_Frigate_Pirate", "Redcore Frigate Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LongRange, callHelpProbability: 0, seekDistance: 9000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("SFB-1_Pirate", "SFB-1 Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Skull_Drone_Pirate", "Skull Drone Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 30, seekDistance: 6000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Storm_Eagle_Pirate", "Storm Eagle Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Trainspark_Pirate", "Trainspark Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Grinder, callHelpProbability: 50, seekDistance: 6000, playerPriority: 1, ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Trainspark_Pirate_Ready", "Trainspark Pirate Mk.2", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Grinder, callHelpProbability: 50, seekDistance: 6000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Turcopoli_Pirate", "Turcopoli Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Turmfalke_EF-01_Pirate", "Turmfalke EF-01 Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("V-2_Gunboat_Pirate", "V-2 Gunboat Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("V-9_Scout_Pirate", "V-9 Scout Pirate", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 60, seekDistance: 12000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Fighter_Drone_Mk.IV", "Fighter Drone Mk.IV", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 3000, playerPriority: 1, factionTag: "SEPD", ambushMode: true);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Fighter_Drone_Mk.IV_Ready", "Fighter Drone Mk.V", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 4000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("AI_Guard_Advanced_Police", "Advanced Guard Police", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 50, seekDistance: 5000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Defender_Drone", "Defender Drone", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Eagle_Atmo_Police", "Eagle Atmospheric Police", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 60, seekDistance: 10000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Eagle_Police", "Eagle Police", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 70, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Eagle_Police_Station_Patrol", "Eagle Police Patrol", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("G-201_Devastator_Police_Chief", "G-201 Devastator Police Chief", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 100, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Heavy_Police_Hover_Bike_Piloted", "Heavy Police Hover Bike", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 6000, playerPriority: 1);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Asp", "Police Asp", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Butterfly", "Police Butterfly", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Colibri_VTOL", "Police Colibri VTOL", type: CustomPrefabConfiguration.PrefabType.Fighter, safeSpawnLocations: CustomPrefabConfiguration.PrefabSafeSpawnLocations.Atmosphere, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Firespark", "Police Firespark", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Firespark_Mk.II", "Police Firespark Mk.II", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Outpost", "Police Outpost", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Outpost", "Police Hover Bike", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Police_Panzerklein", "Police Panzerklein", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.Police, callHelpProbability: 0, seekDistance: 4000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Satyr_Police", "Satyr Light Gunship", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.LargeGrid, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "SEPD");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Asp_Cop_Car", "Cop Car", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Asp_Fighter", "Asp Fighter", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Eagle", "Eagle Heavy Fighter", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Little_Bird", "Little Bird", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Space_Motorcycle_ADC-300S", "Space Motorcycle ADC-300S", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Vixen_D2", "Vixen D2", type: CustomPrefabConfiguration.PrefabType.None, factionTag: "Nobody");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Dromedary_Trader", "Dromedary Trader", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "ISTG");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Helios_Wheel_Trader", "Helios Wheel Trader", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "ISTG");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("Phaeton_Trading_Outpost", "Phaeton Trading Outpost", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "ISTG");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_XMC_603_Factory", "XMC 603 Factory", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_XMC_718_Trading_Outpost", "XMC 718 Trading Outpost", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("PE_XMC_99_Refinery", "XMC 99 Refinery", type: CustomPrefabConfiguration.PrefabType.Station, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Endor_Mining_Vessel", "XMC Endor Mining Vessel", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 320, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Kimaris_Escort", "XMC Kimaris Escort", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 8000, playerPriority: 1, factionTag: "EXMC", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Kimaris_Security", "XMC Kimaris Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Tempest_Fighter_Escort", "XMC Tempest Fighter Escort", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 6000, playerPriority: 1, factionTag: "EXMC", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Tempest_Fighter_Security", "XMC Tempest Fighter Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 10000, playerPriority: 1, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Type_2_Cargo", "XMC Type 2", type: CustomPrefabConfiguration.PrefabType.Freighter, fleeOnlyWhenDamaged: true, fleeTriggerDistance: 600, fleeSpeedCap: 480, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Valkyrie_II_Escort", "XMC Valkyrie II Escort", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 6000, playerPriority: 1, factionTag: "EXMC", delayedAi: true, activationDistance: 900);
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
                testPrefab = new CustomPrefabConfiguration("XMC_Valkyrie_II_Security", "XMC Valkyrie II Security", type: CustomPrefabConfiguration.PrefabType.Fighter, preset: CustomPrefabConfiguration.PrefabPreset.SmallGrid, callHelpProbability: 0, seekDistance: 11000, playerPriority: 1, factionTag: "EXMC");
                Definitions.CustomPrefabConfigurations.Add(testPrefab.DisplayName, testPrefab);
            }
            catch (Exception e)
            {
                Core.GeneralLog.WriteToLog("DictionaryAddException", $"{e}");
            }
        }
    }
}
